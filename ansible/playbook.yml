---

- name: run the playbook tasks on the localhost
  hosts: localhost
  vars:
    - vpn_bootstrap: false
  vars_prompt:
  - name: "vpn_password"
    prompt: "Enter VPN password (NOT kerberos)"
    private: yes

  tasks:
  - include_vars: "{{ private_vars }}"
  - include_vars: fedora.yml
    when: ansible_distribution == 'Fedora'
  - include_vars: debian.yml
    when: ansible_distribution != 'Fedora'

  - name: Remove software
    package:
      name: "{{ packages_to_remove }}"
      state: absent

  # This is prerequisite for ansible to work on the host.
  - name: Install prerequisite software
    package:
      name: "{{ prerequisite }}"
      state: present

  - name: Gather package facts
    package_facts:
      manager: auto
    no_log: True

  - block:
    - name: Install bootstrap VPN
      unarchive:
        decrypt: yes
        src: "{{ bootstrap_vpn }}"
        dest: /
    - name: Activate network for bootstrap VPN
      command: nmcli connection reload
    - name: Establish temporary vpn filename
      shell: basename $(ls /etc/NetworkManager/system-connections/* )
      register: vpn_filename
    - name: Note this action.
      set_fact:
        vpn_bootstrap: True
    when: '"redhat-internal-NetworkManager-openvpn-profiles-non-gnome" not in ansible_facts.packages and ansible_distribution == "Fedora"'

  - block:
    - name: Connect to VPN
      expect:
        command: nmcli -a connection up '{{ vpn_connection }}'
        echo: yes
        responses:
          vpn.secrets.password: "{{ vpn_password }}"
      register: command_result
      # Handle double connection
      failed_when: '"is already active" not in command_result.stdout'
      changed_when: False
    - debug:
        msg="Verifying VPN connection exists...( if not activate vpn connection by running nmcli -a connection up {{ vpn_connection }} )"
    - name: Check bootstrap VPN exists
      command: ip link show tun0 up
      changed_when: False
    when: ansible_distribution == "Fedora"

  - name: Install all package upgrades
    package: name=* state=latest

  - name: Add repositories
    include_role:
      name: repositories
    when: ansible_distribution == "Fedora"

  - name: Set hostname
    hostname:
      name: "{{ hostname }}"
    when: ansible_distribution == "Fedora"

  - name: Check GPG Key exists
    stat:
      path: /etc/pki/rpm-gpg/RPM-GPG-KEY-helpdesk
    register: stat_gpg_result
    no_log: True

  - name: Download GPG Key
    get_url:
      url: http://{{ csb_repo }}/rhel7-csb-stage/RPM-GPG-KEY-helpdesk
      dest: /etc/pki/rpm-gpg/RPM-GPG-KEY-helpdesk
    when: not stat_gpg_result.stat.exists and ansible_distribution == "Fedora"

  - block:
    - name: Download SpiderOAK
      get_url:
        url: https://spideroak.com/release/spideroak/rpm_x64
        dest: /tmp/spider.rpm
    - name: Install SpiderOAK
      dnf:
        name: /tmp/spider.rpm
        state: present
    when: '"SpiderOak" not in ansible_facts.packages and ansible_distribution == "Fedora"'

  - name: Install base required software
    package:
      name: "{{ base_packages_to_install }}"
      state: present

  - name: Install base non fedora required software
    package:
      name:
        - libreoffice-l10n-en-gb
        - python-gpg
        - spideroakone
      state: present
    when: ansible_distribution != "Fedora"

  - name: Install standard required software
    package:
      name: "{{ standard_packages_to_install }}"
      state: present
    when: ansible_distribution == "Fedora"

  - name: Install development software
    package:
      name: "{{ development_packages_to_install }}"
      state: present
    when: ansible_distribution == "Fedora"

  # If development packages affect original install list.
  - name: Final software cleanup
    package:
      name:
        - java-openjdk-headless # Old Java 10 installation
    when: ansible_distribution == "Fedora"

  - block:
    - name: Clean bootstrap VPN
      file:
        state: absent
        path: "/etc/NetworkManager/system-connections/{{ vpn_filename }}"
    # Network will be reloaded on system reboot anyway
    - name: Reload network
      command: nmcli connection reload
    when: vpn_bootstrap == True and ansible_distribution == "Fedora"

  - name: Patch VPN
    lineinfile:
      path: "{{ item }}"
      insertafter: "tunnel-mtu=1360"
      line: "username={{ vpn_username }}"
    with_fileglob:
      - "/etc/NetworkManager/system-connections/*.ovpn"
    when: ansible_distribution == "Fedora"

  - name: Allow port ranges for KDEConnect
    firewalld:
      immediate: yes
      permanent: true
      state: enabled
      port: '{{ item }}'
    with_items:
      - "1714-1764/udp"
      - "1714-1764/tcp"
    when: ansible_distribution == "Fedora"

  - name: Patch krb5.conf
    template:
      src: krb5.conf.j2
      dest: /etc/krb5.conf
    when: ansible_distribution == "Fedora"

  - name: User account configuration
    include_role:
      name: user

  - name: Install minishift
    include_role:
      name: minishift
    when: ansible_distribution == "Fedora"
